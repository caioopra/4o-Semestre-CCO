- Operadores Lambda
\
->

	((\x -> x * x) 3)		=> 9
		=> argumento: x
		=> operação: x * x
		=> entrada: 3 (parametro)
	((\x -> x + 10) 3)		=> 13
	((\x y -> x + y) 3 5)		=> 8
		=> argumentos: x, y
		=> x + y
		=> parametro de entrada: 3, 5
	
	
=> usar lambda como função de entrada pra outras funções
	-> há funções que tem saída/entrada sendo funções

	main = do
		print (map (\x -> x + 1) [1, 2, 3, 4])
		print (map (\x -> if x == 0 then "a" else "b) [0, 1, 0, 1, 1]
		
	-> funcionaria também para filter

	----------------------
	
	fun1 :: Int -> (Int -> Int)
	fun1 x = (\k -> k + x)
	
	main = do
		let m = ((fun1 10) 5)
		print m  	
		
		-> 10 é passado como x
		-> fun1 retorna uma função que recebe inteiro e retorna inteiro (lambda)
			-> retorna a função, nesse caso: (\k -> k + 10)
		-> m = 15

=> função "fix": permite fazer chamada recursiva usando cálculo lambda
	-> "combinador y"
	
	-> exemplo slide 7
	

	
	
